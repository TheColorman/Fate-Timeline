{"version":3,"sources":["helpers/WindowDimensions.js","helpers/FloatingLineUtils.ts","helpers/FloatingEdge.js","helpers/FloatingConnectionLine.js","images/Zero.jpg","images/SN.jpg","images/UBW.jpg","images/HF.jpg","helpers/createElements.js","flow.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","getNodeIntersection","intersectionNode","targetNode","__rf","intersectionNodeWidth","intersectionNodeHeight","intersectionNodePosition","position","targetPosition","w","h","x2","x","y2","y","x1","y1","xx1","yy1","a","Math","abs","xx3","yy3","getEdgePosition","node","intersectionPoint","n","nx","round","ny","px","py","Position","Left","Right","Top","Bottom","getEdgeParams","source","target","sourceIntersectionPoint","targetIntersectionPoint","sourcePos","targetPos","sx","sy","tx","ty","FloatingEdge","id","arrowHeadType","markerEndId","style","nodes","useStoreState","state","markerEnd","getMarkerEnd","sourceNode","useMemo","find","dSmoothStep","getBezierPath","sourceX","sourceY","sourcePosition","targetX","targetY","getSmoothStepPath","className","d","FloatingConnectionLine","fill","stroke","strokeWidth","cx","cy","r","FateData","edgeType","initialElements","ArrowHeadType","Arrow","elements","i","FateEntry","FateImage","FateImages","ImageComponent","props","hasImage","src","alt","name","draggable","push","data","label","type","animated","length","createElements","edgeTypes","floating","Flow","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","setElements","onElementsRemove","elementsToRemove","els","removeElements","onConnect","params","addEdge","connectionLineComponent","snapToGrid","minZoom","defaultZoom","defaultPosition","nodesDraggable","nodesConnectable","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9f67e71.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// windowDimentions\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import { Position, ArrowHeadType, Node, XYPosition } from 'react-flow-renderer';\r\n\r\n// this helper function returns the intersection point\r\n// of the line between the center of the intersectionNode and the target node\r\nfunction getNodeIntersection(intersectionNode: Node, targetNode: Node): XYPosition {\r\n  // https://math.stackexchange.com/questions/1724792/an-algorithm-for-finding-the-intersection-point-between-a-center-of-vision-and-a\r\n  const {\r\n    width: intersectionNodeWidth,\r\n    height: intersectionNodeHeight,\r\n    position: intersectionNodePosition,\r\n  } = intersectionNode.__rf;\r\n  const targetPosition = targetNode.__rf.position;\r\n\r\n  const w = intersectionNodeWidth / 2;\r\n  const h = intersectionNodeHeight / 2;\r\n\r\n  const x2 = intersectionNodePosition.x + w;\r\n  const y2 = intersectionNodePosition.y + h;\r\n  const x1 = targetPosition.x + w;\r\n  const y1 = targetPosition.y + h;\r\n\r\n  const xx1 = (x1 - x2) / (2 * w) - (y1 - y2) / (2 * h);\r\n  const yy1 = (x1 - x2) / (2 * w) + (y1 - y2) / (2 * h);\r\n  const a = 1 / (Math.abs(xx1) + Math.abs(yy1));\r\n  const xx3 = a * xx1;\r\n  const yy3 = a * yy1;\r\n  const x = w * (xx3 + yy3) + x2;\r\n  const y = h * (-xx3 + yy3) + y2;\r\n\r\n  return { x, y };\r\n}\r\n\r\n// returns the position (top,right,bottom or right) passed node compared to the intersection point\r\nfunction getEdgePosition(node: Node, intersectionPoint: XYPosition) {\r\n  const n = { ...node.__rf.position, ...node.__rf };\r\n  const nx = Math.round(n.x);\r\n  const ny = Math.round(n.y);\r\n  const px = Math.round(intersectionPoint.x);\r\n  const py = Math.round(intersectionPoint.y);\r\n\r\n  if (px <= nx + 1) {\r\n    return Position.Left;\r\n  }\r\n  if (px >= nx + n.width - 1) {\r\n    return Position.Right;\r\n  }\r\n  if (py <= ny + 1) {\r\n    return Position.Top;\r\n  }\r\n  if (py >= n.y + n.height - 1) {\r\n    return Position.Bottom;\r\n  }\r\n\r\n  return Position.Top;\r\n}\r\n\r\n// returns the parameters (sx, sy, tx, ty, sourcePos, targetPos) you need to create an edge\r\nexport function getEdgeParams(source: Node, target: Node) {\r\n  const sourceIntersectionPoint = getNodeIntersection(source, target);\r\n  const targetIntersectionPoint = getNodeIntersection(target, source);\r\n\r\n  const sourcePos = getEdgePosition(source, sourceIntersectionPoint);\r\n  const targetPos = getEdgePosition(target, targetIntersectionPoint);\r\n\r\n  return {\r\n    sx: sourceIntersectionPoint.x,\r\n    sy: sourceIntersectionPoint.y,\r\n    tx: targetIntersectionPoint.x,\r\n    ty: targetIntersectionPoint.y,\r\n    sourcePos,\r\n    targetPos,\r\n  };\r\n}\r\n\r\nexport function createElements() {\r\n  const elements = [];\r\n  const center = { x: window.innerWidth / 2, y: window.innerHeight / 2 };\r\n\r\n  elements.push({ id: 'target', data: { label: 'Target' }, position: center });\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    const degrees = i * (360 / 8);\r\n    const radians = degrees * (Math.PI / 180);\r\n    const x = 250 * Math.cos(radians) + center.x;\r\n    const y = 250 * Math.sin(radians) + center.y;\r\n\r\n    elements.push({ id: `${i}`, data: { label: 'Source' }, position: { x, y } });\r\n\r\n    elements.push({\r\n      id: `edge-${i}`,\r\n      target: 'target',\r\n      source: `${i}`,\r\n      type: 'floating',\r\n      arrowHeadType: ArrowHeadType.Arrow,\r\n    });\r\n  }\r\n\r\n  return elements;\r\n}","import { useMemo } from 'react';\r\nimport { getMarkerEnd, useStoreState, getBezierPath, getSmoothStepPath } from 'react-flow-renderer';\r\n\r\nimport { getEdgeParams } from './FloatingLineUtils.ts';\r\n\r\nconst FloatingEdge = ({ id, source, target, arrowHeadType, markerEndId, style }) => {\r\n  const nodes = useStoreState((state) => state.nodes);\r\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\r\n\r\n  const sourceNode = useMemo(() => nodes.find((n) => n.id === source), [source, nodes]);\r\n  const targetNode = useMemo(() => nodes.find((n) => n.id === target), [target, nodes]);\r\n\r\n  if (!sourceNode || !targetNode) {\r\n    return null;\r\n  }\r\n\r\n  const { sx, sy, tx, ty, sourcePos, targetPos } = getEdgeParams(sourceNode, targetNode);\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const dBezier = getBezierPath({\r\n    sourceX: sx,\r\n    sourceY: sy,\r\n    sourcePosition: sourcePos,\r\n    targetPosition: targetPos,\r\n    targetX: tx,\r\n    targetY: ty,\r\n  });\r\n  const dSmoothStep = getSmoothStepPath({\r\n    sourceX: sx,\r\n    sourceY: sy,\r\n    sourcePosition: sourcePos,\r\n    targetPosition: targetPos,\r\n    targetX: tx,\r\n    targetY: ty,\r\n  });\r\n\r\n  return (\r\n    <g className=\"react-flow__connection\">\r\n      <path id={id} className=\"react-flow__edge-path\" d={dSmoothStep} markerEnd={markerEnd} style={style} />\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default FloatingEdge;","import { getBezierPath, getSmoothStepPath } from \"react-flow-renderer\";\r\n\r\nimport { getEdgeParams } from \"./FloatingLineUtils.ts\";\r\n\r\nconst FloatingConnectionLine = ({\r\n    targetX,\r\n    targetY,\r\n    sourcePosition,\r\n    targetPosition,\r\n    sourceNode,\r\n}) => {\r\n    if (!sourceNode) {\r\n        return null;\r\n    }\r\n\r\n    const targetNode = {\r\n        id: \"connection-target\",\r\n        __rf: { width: 1, height: 1, position: { x: targetX, y: targetY } },\r\n    };\r\n\r\n    const { sx, sy } = getEdgeParams(sourceNode, targetNode);\r\n    // eslint-disable-next-line no-unused-vars\r\n    const dBezier = getBezierPath({\r\n        sourceX: sx,\r\n        sourceY: sy,\r\n        sourcePosition,\r\n        targetPosition,\r\n        targetX,\r\n        targetY,\r\n    });\r\n    const dSmoothStep = getSmoothStepPath({\r\n        sourceX: sx,\r\n        sourceY: sy,\r\n        sourcePosition,\r\n        targetPosition,\r\n        targetX,\r\n        targetY,\r\n    });\r\n\r\n    return (\r\n        <g>\r\n            <path\r\n                fill=\"none\"\r\n                stroke=\"#222\"\r\n                strokeWidth={1.5}\r\n                className=\"animated\"\r\n                d={dSmoothStep}\r\n            />\r\n            <circle\r\n                cx={targetX}\r\n                cy={targetY}\r\n                fill=\"#fff\"\r\n                r={3}\r\n                stroke=\"#222\"\r\n                strokeWidth={1.5}\r\n            />\r\n        </g>\r\n    );\r\n};\r\n\r\nexport default FloatingConnectionLine;\r\n","export default __webpack_public_path__ + \"static/media/Zero.650d05c3.jpg\";","export default __webpack_public_path__ + \"static/media/SN.cac80d16.jpg\";","export default __webpack_public_path__ + \"static/media/UBW.ed2bd810.jpg\";","export default __webpack_public_path__ + \"static/media/HF.4db29ef8.jpg\";","import React from \"react\";\r\nimport * as FateImages from \"../images/images.js\";\r\nimport * as FateDataRaw from \"../data/data.json\";\r\nimport { ArrowHeadType } from \"react-flow-renderer\";\r\n\r\nconst FateData = FateDataRaw.default;\r\n\r\nconst edgeType = 'smoothstep'; // 'floating' for custom floating edges\r\nconst animated = true;\r\n\r\nexport default function createElements() {\r\n    const elements = [];\r\n    for (let i = 0; i < FateData.length; i++) {\r\n        const FateEntry = FateData[i];\r\n        const FateImage = FateImages['i_' + FateEntry.id];\r\n\r\n        // Generate image\r\n        const ImageComponent = (props) => {\r\n            const hasImage = props.hasImage;\r\n            if (hasImage) {\r\n                return (\r\n                    <img\r\n                        src={FateImage}\r\n                        alt={FateEntry.name}\r\n                        draggable=\"false\"\r\n                        style={{\r\n                            width: '100%',\r\n                        }}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // Push Node\r\n        elements.push({\r\n            id: FateEntry.id,\r\n            data: {\r\n                label: (\r\n                    <div>\r\n                        {FateEntry.name}\r\n                        <ImageComponent hasImage = {!!FateImage} />\r\n                    </div>\r\n                ),\r\n            },\r\n            position: FateEntry.position,\r\n            sourcePosition: 'right',\r\n            targetPosition: 'left',\r\n        });\r\n\r\n        // Push Edge\r\n        if (FateEntry.source) {\r\n            elements.push({\r\n                id: `edge-${FateEntry.source}-${FateEntry.id}`,\r\n                target: FateEntry.id,\r\n                source: FateEntry.source,\r\n                arrowHeadType: ArrowHeadType.Arrow,\r\n                type: edgeType,\r\n                animated: animated,\r\n                style: {\r\n                    strokeWidth: \"2px\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return elements;\r\n}","import React, { useState } from \"react\";\r\nimport ReactFlow, {\r\n    addEdge,\r\n    Background,\r\n    ArrowHeadType,\r\n    removeElements,\r\n} from \"react-flow-renderer\";\r\n\r\nimport useWindowDimensions from \"./helpers/WindowDimensions\";\r\nimport FloatingEdge from \"./helpers/FloatingEdge\";\r\nimport FloatingConnectionLine from \"./helpers/FloatingConnectionLine.js\";\r\nimport createElements from \"./helpers/createElements.js\";\r\n\r\nimport * as FateImages from \"./images/images.js\";\r\n\r\nconst edgeType = \"smoothstep\"; // floating or smoothstep\r\n// eslint-disable-next-line no-unused-vars\r\nconst testElements = [\r\n    {\r\n        id: \"SN\",\r\n        data: { label: \"Fate/stay night\" },\r\n        position: { x: 10, y: 10 },\r\n        targetPosition: \"left\",\r\n    },\r\n    // default node\r\n    {\r\n        id: \"UBW\",\r\n        data: { label: \"Fate/stay night: Unlimited Blade Works\" },\r\n        position: { x: 10, y: 10 },\r\n        targetPosition: \"left\",\r\n    },\r\n    {\r\n        id: \"HF\",\r\n        data: { label: \"Fate/stay night: Heaven's Feel\" },\r\n        position: { x: 10, y: 10 },\r\n        targetPosition: \"left\",\r\n    },\r\n    {\r\n        id: \"Zero\",\r\n        data: {\r\n            label: (\r\n                <div>\r\n                    <img\r\n                        src={FateImages.i_Zero}\r\n                        alt=\"Fate/Zero thumbnail\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n        },\r\n        position: { x: 10, y: 10 },\r\n        sourcePosition: \"right\",\r\n    },\r\n    // animated edge\r\n    {\r\n        id: \"edge-Z-SN\",\r\n        target: \"SN\",\r\n        source: \"Zero\",\r\n        arrowHeadType: ArrowHeadType.Arrow,\r\n        type: edgeType,\r\n        animated: true,\r\n    },\r\n    {\r\n        id: \"edge-Z-UBW\",\r\n        target: \"UBW\",\r\n        source: \"Zero\",\r\n        arrowHeadType: ArrowHeadType.Arrow,\r\n        type: edgeType,\r\n        animated: true,\r\n        style: { \"strokeWidth\": \"500px\" },\r\n    },\r\n    {\r\n        id: \"edge-Z-HF\",\r\n        target: \"HF\",\r\n        source: \"Zero\",\r\n        arrowHeadType: ArrowHeadType.Arrow,\r\n        type: edgeType,\r\n        animated: true,\r\n    },\r\n];\r\n\r\nconst initialElements = createElements();\r\n\r\nconst edgeTypes = {\r\n    floating: FloatingEdge,\r\n};\r\n\r\nconst Flow = () => {\r\n    const { height, width } = useWindowDimensions();\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n\r\n    const onElementsRemove = (elementsToRemove) =>\r\n        setElements((els) => removeElements(elementsToRemove, els));\r\n\r\n    const onConnect = (params) => {\r\n        setElements((els) =>\r\n            addEdge(\r\n                {\r\n                    ...params,\r\n                    type: \"floating\",\r\n                    arrowHeadType: ArrowHeadType.Arrow,\r\n                },\r\n                els\r\n            )\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: height, width: width }} className=\"floatingedges\">\r\n            <ReactFlow\r\n                elements={elements}\r\n                onElementsRemove={onElementsRemove}\r\n                onConnect={onConnect}\r\n                edgeTypes={edgeTypes}\r\n                connectionLineComponent={FloatingConnectionLine}\r\n                snapToGrid={true}\r\n                minZoom={0.1}\r\n                defaultZoom={1}\r\n                defaultPosition={[200, 300]}\r\n                nodesDraggable={false}\r\n                nodesConnectable={false}\r\n            >\r\n                <Background />\r\n            </ReactFlow>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Flow;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Flow from \"./flow\"\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Flow />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}